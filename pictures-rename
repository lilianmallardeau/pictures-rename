#!/usr/bin/env python3
from dataclasses import dataclass
from datetime import datetime
from pathlib import Path
import argparse
import sys

import exiftool


@dataclass
class MediaAsset:
    path: Path
    new_name: str = None
    exif_data: dict = None
    date_created: datetime = None

    def rename(self):
        if self.new_name:
            self.path.rename(self.path.with_stem(self.new_name))
        else:
            raise ValueError(f"{self.path} has no new_name set")
    
    @property
    def new_path(self) -> Path:
        return self.path.with_stem(self.new_name)


def main():
    parser = argparse.ArgumentParser(
        prog='pictures-rename',
        description="Rename photos inside a directory from EXIF data according to a specific format"
    )
    parser.add_argument("-f", "--format", default="%F %T", help="Date format, as per https://strftime.org", type=str)
    parser.add_argument("-g", "--from-filename", default=False, help="Parse date and time from filename using the specified strftime format instead of using EXIF data", metavar="FORMAT", type=str)
    parser.add_argument("-n", "--dry-run", default=False, action="store_true", help="Dry run, don't rename files, just show how files would be renamed")
    parser.add_argument("-c", "--check-order", default=False, action="store_true", help="Check that file order (alphabetical) will be preserved before renaming")
    parser.add_argument("files", nargs='+', help="Files to rename", type=Path)
    args = parser.parse_args()

    files = [MediaAsset(f) for f in args.files]

    if args.from_filename:
        # Parse datetime from filename
        for f in files:
            f.date_created = datetime.strptime(f.path.stem, args.from_filename)

    else:
        # Read EXIF data
        with exiftool.ExifToolHelper() as et:
            exif_data = et.get_metadata(args.files)

        assert len(files) == len(exif_data)

        for i, f in enumerate(files):
            f.exif_data = exif_data[i]
            f.date_created = datetime.strptime(f.exif_data["EXIF:DateTimeOriginal"], "%Y:%m:%d %H:%M:%S")

    # Computing new names
    for f in files:
        f.new_name = f.date_created.strftime(args.format)

    # Checking for duplicate names    
    files_by_path = {}
    for f in files:
        files_by_path.setdefault(f.new_path, []).append(f)
    for k_path, v_files in files_by_path.items():
        if len(v_files) > 1:
            for i, f in enumerate(v_files, start=1):
                f.new_name += f" ({i})"

    # Check that file order stays the same after rename
    if args.check_order:
        if sorted(files, key=lambda f: f.path) != sorted(files, key=lambda f: f.new_path):
            print("File order won't be preserved while renaming, aborting.", file=sys.stderr)
            exit(3)

    # Actual renaming (if not dry run)
    for f in files:
        print("{} -> {}".format(f.path, f.new_path.name))
        if not args.dry_run:
            f.rename()


if __name__ == '__main__':
    main()
